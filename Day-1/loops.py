# PYTHON LOOPS - COMPREHENSIVE GUIDE
# ===================================
# Loops are fundamental constructs in programming that allow you to execute a block of code repeatedly.
# Python provides two main types of loops: `for` loops and `while` loops.
# This file focuses on `for` loops, which are used for iterating over a sequence (like a list, tuple, dictionary, set, or string).

#=================EXAMPLE 1: ITERATING OVER A LIST=================
# The most common use of a `for` loop is to iterate through each item in a list.
names = ["Alice", "Bob", "Charlie"]

print("Method 1: Direct iteration over list items")
# In each iteration, the `name` variable takes the value of the next item in the `names` list.
for name in names:
    print(f"Hello, {name}!")

# HOW IT WORKS:
# Iteration 1: `name` is "Alice"  -> prints "Hello, Alice!"
# Iteration 2: `name` is "Bob"    -> prints "Hello, Bob!"
# Iteration 3: `name` is "Charlie" -> prints "Hello, Charlie!"
print("="*60)

#=================EXAMPLE 2: ITERATING USING INDICES AND `range()`=================
print("Method 2: Using indices to access list items")
# `len(names)` gives the total number of items in the list (3).
# `range(len(names))` generates a sequence of numbers from 0 up to (but not including) 3, which are the indices [0, 1, 2].
for index in range(len(names)):
    # We use the index to access the element at that position in the list.
    print(f"Hello, {names[index]}!")

# BREAKDOWN:
# `len(names)` is 3.
# `range(3)` creates a sequence: 0, 1, 2.
# Iteration 1: `index` is 0 -> `names[0]` is "Alice"
# Iteration 2: `index` is 1 -> `names[1]` is "Bob"
# Iteration 3: `index` is 2 -> `names[2]` is "Charlie"

# WHEN TO USE EACH METHOD:
# - Method 1 (direct iteration): Use when you only need the value of each item. It's cleaner and more Pythonic.
# - Method 2 (index-based): Use when you need both the index and the value, or if you need to modify the list during iteration (though this is often discouraged).
print("="*60)

#=================EXAMPLE 3: THE `range()` FUNCTION WITH PARAMETERS=================
print("Using `range()` with start, stop, and step parameters")
# `range(start, stop, step)` generates a sequence of numbers.
# It starts at `start`, increments by `step`, and stops *before* reaching `stop`.
for i in range(0, 10, 2):
    print(f"Current number: {i}")

# `range()` EXPLAINED:
# `range(0, 10, 2)` means:
# - Start at 0 (inclusive).
# - Stop before 10 (exclusive).
# - Step by 2 (increment by 2 each time).
# This generates the sequence: 0, 2, 4, 6, 8.

print("\nOther `range()` examples:")
# To see the numbers generated by `range()`, we can convert it to a list.
print("range(5):", list(range(5)))           # Only `stop` is provided. Starts at 0 by default. -> [0, 1, 2, 3, 4]
print("range(2, 8):", list(range(2, 8)))     # `start` and `stop` are provided. -> [2, 3, 4, 5, 6, 7]
print("range(10, 0, -1):", list(range(10, 0, -1))) # A negative `step` can be used for a countdown. -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print("="*60)

#=================EXAMPLE 4: LOOP CONTROL STATEMENTS - `continue` & `break`=================
print("Demonstrating 'continue' and 'break' statements")
# These statements alter the flow of a loop.
for i in range(5):  # This loop will iterate through the sequence [0, 1, 2, 3, 4].
    if i == 3:
        print(f"Skipping number {i} with 'continue'")
        continue  # `continue` immediately ends the current iteration and moves to the next one.
    
    if i == 4:
        print(f"Breaking the loop at number {i} with 'break'")
        break  # `break` terminates the loop entirely.
        
    print(f"Processing number: {i}")

# EXECUTION FLOW:
# i = 0: The conditions are false. Prints "Processing number: 0".
# i = 1: The conditions are false. Prints "Processing number: 1".
# i = 2: The conditions are false. Prints "Processing number: 2".
# i = 3: The first `if` is true. Prints "Skipping number 3..." and the `continue` statement starts the next iteration (with i=4).
# i = 4: The second `if` is true. Prints "Breaking the loop..." and the `break` statement exits the loop.

print("\nKEY DIFFERENCES:")
print("• 'continue': Skips the rest of the current iteration and proceeds to the next one.")
print("• 'break': Exits the loop immediately, regardless of any remaining items in the sequence.")

print("\nCOMMON USE CASES:")
print("• `continue`: Useful for skipping over invalid data or specific items you don't want to process.")
print("• `break`: Useful for stopping a search once an item has been found.")
print("="*60)

#=================ADDITIONAL LOOP CONCEPTS=================
# As you advance, you'll encounter more powerful looping techniques:
# - `while` loops: Repeat a block of code as long as a certain condition is true.
# - Nested loops: Placing one loop inside another, useful for working with 2D data structures.
# - `enumerate()`: A function that provides both the index and the value during iteration.
# - `zip()`: A function to iterate over multiple sequences at the same time.
# - List Comprehensions: A concise way to create lists using a `for` loop inside square brackets.